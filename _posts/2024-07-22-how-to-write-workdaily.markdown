---
title: "谈一谈我是怎么写工作日报的"
date:   2024-07-22 11:06:26 +0800
layout: default
categories:
  - daily
tags:
  - work
  - daily
  - Methodology
---

# 谈一谈我是怎么写工作日报的
> 我这里的提的工作日报是辅助自己工作的，而非向上汇报的

## 给自己的工作日报
工程师的工作远不只是写写程序那么简单，太多太多的烦心事会一个接着一个来，比如：突发会议，现网紧急事故，团队文化建设，一次团队合影，等等。当然，很多人都会认为这些非生产的都是浪费时间，毕竟做这些事情并不能再自己的简历或者工作汇报PPT中增加光彩，也不能让你收获“改变世界”的情绪快乐。然后现实就是这些都是必须的，你必须有效的面对这些事情，才能从容的完成自己的工作。

而工作日报是一个非常廉价且可靠的工具，来帮助你更丝滑的完成自己的工作。

我们喜欢用各种各样的工具，尤其是工程师们，不仅喜欢用，更喜欢创造工具。工作日报这个工具核心价值有3点：
1. 记录过程
2. 记录负债
3. 梳理思路

我们为什么讨厌写程序以外的事，有一个原因就是它让我们暂离编码，等我们回归编码时，需要花费大量时间和精力修复自己的思考状态，然而除了这些意外的工作，每天下班回家，节假日休息其实也是有相同的效果。快速的记录一笔我们工作的进度和当前的问题，可以让我们“断点续传”时，速度更快，相当于一个存档点，这就是记录过程的重要性。

而记录负债的意思，就是记录我们为了“折衷”做了什么不得已的事，而这件事会成为一个“坑”，比如说：你的代码今天就要提测了，很明确的某个功能未完成，但是为了流程组织要求你"hard code"这部分功能，以便不阻塞某些进度，此时如果不记上一笔，也许某天你会忘记它，而系统可能会因为这些点而失去它的可扩展性。

梳理思路的意思是你的工作日报必须可以帮助你搞清你今天要做什么，这是一条底线记录，如果不完成可能不得不选择加班。

## 用什么记录
我选择的是vscode，打开一个vscode窗口，创建一个目录，用年命名目录，用月命名文件，每个二级标题就是一个日期，当然你也可以为他添加一些主题，这就够了。
### 为什么选择vscode，而不是别的
因为我个人是基于vscode开展编程工作的，而额外打开其他软件会增加我切换的成本，而且vscode的markdown插件也是非常好用的，所以我选择了vscode。

## 记录什么内容
我会在每天的工作开始前，先打开vscode，然后创建一个新的markdown文件，然后在文件中写下今天的日期，然后开始写下今天的工作计划，这个计划是我今天的工作的底线，不过并不是每天都有必须要完成的事，这取决于今天是否是某些事项的deadline，当然你害怕忘记，提前一天在今天的工作日报中写下明天的工作计划也是可以的。

我们可以命名为 "### 计划"，然后我没完成一件事，都会在"### 进展"下面记上一笔，如果很有成就感，会额外加一些想法，或者遇到某些问题会把问题添加进去，如果问题解决了，同样也会把解决方案添加进去，添加内容不限于想到某个算法，解决某个令人发指的环境问题以及解决了某些人的“在我电脑上没办法运行”的问题。

最后就是欠债与还债，这部分就是把今天工作做的自认为未来需要改进或者夯实的内容记录下来，这部分可能因为工作进程问题被无限延长，但是当你做年终总结或者工作交接时，可以确保它不会被忘记。
### 一个典型的日报
```markdown
## 2024-07-22
### 计划
* 完成trans的函数编写
### 进展
* 完成了trans的函数编写
* 开了组内会议，提到了做一个高速缓存的构想，但是似乎还没有定论
    * 可以考虑主动去设计
### 欠债与还债
* trans的单元测试还没有写

## 使用工作日报的好处
### 为什么不是周报
人的记忆力是有限的，我见过最夸张的是，自己电脑设置了一个3秒一次的截屏脚本，然后每周五下午就开始一张一张的看截图回忆自己做了什么。大部分时候，我们都想不起自己哪天做了哪些事，这就是为什么我们需要工作日报，而不是周报。
### 用日报可以快速搞定总结
当你需要总结自己的工作时，你可以快速的翻阅自己的工作日报，然后就可以快速的总结出自己的工作，而不是花费大量的时间去回忆。我们随时都需要应对leader们让我们输出PPT或者文档的需求，这个时候拥有自己的日报可太舒服了。

## 总结
工作日报是一个解决自己工作记录麻烦的好工具，你可以用vscode等简单的编辑器进行记录，格式尽可能的简单，记得三个要点，完成这3个要点的记录即可，不要给自己添加额外的格式负担，降低记录门槛，让工作日报有效的服务自己。
